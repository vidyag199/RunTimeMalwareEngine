'''
Created on Apr 23, 2018

@author: ashaman
'''
from output.output_plugin import OutputPlugin
from analyzers.Analyst import Analyst

class JSONOutputPlugin(OutputPlugin):

  def __init__(self):
    self.jsonData = {}
    self.jsonData["Reports"] = []
    self.processData = {}

  def convertTableToDictionary(self, table):
    column_headers = table.column_headers
    tableDict = []
    for row in table:
      table_row = {}
      column_index = 0
      for column in column_headers:
        table_row[column] = row[column_index]
        column_index += 1

      tableDict.append(table_row)

    return tableDict

  def print_process_summary(self, report_data):
    for data in report_data:
      if data[0] == Analyst.DATA_TYPE_TABLE_DATA:
        table = data[1]
        self.jsonData["Summary"] = self.convertTableToDictionary(table)


  def print_process_report(self, pid, descriptor, image, report_data):
    self.processData = {}
    self.processData["Suspicious Behaviors"] = []

    for data in report_data:
      if data[0] == Analyst.PROCESS_ANALYST_SCORES_TABLE:
        table = data[1]
        self.processData["PID"] = pid
        self.processData["Descriptor Address"] = descriptor
        self.processData["Image"] = image
        totalAnalyst = table.pop_row();
        self.processData["Suspicion Score"] = totalAnalyst[1]
        self.processData["Analysts"] = self.convertTableToDictionary(table)
        self.jsonData["Reports"].append(self.processData)
      elif data[0] == Analyst.DATA_TYPE_ANALYST_HEADING:
        analystName = data[1]
      elif data[0] == Analyst.DATA_TYPE_ANALYST_PROCESS_DATA:
        analystData = data[1]
        index = 0
        while index < len(analystData):
          if analystData[index][0] == Analyst.DATA_TYPE_TABLE_DATA:
            aData = {"Analyst": analystName, "Table":self.convertTableToDictionary(analystData[index][1])}
            self.processData["Suspicious Behaviors"].append(aData)
          index += 1

  def setTreeData(self, roots, json_tree):
    if len(roots) > 1:
      print(roots)
      raise Exception("Expected mitree to only have one root node:  %s!!!")

    self.processData["Tree"] = json_tree


  def getJSONData(self):
    return self.jsonData