'''
Created on Mar 21, 2018

@author: ashaman
'''

import logging
from analyzers.Analyst import Analyst
from beautifultable import BeautifulTable

class FailedConnectionsAnalyst(Analyst):
    '''
    Checks if the specified process had at least 5 attempts
    to connect to different hosts fail.  Indicative of possible
    malware trying to find command center.
    '''

    FAILED_CONNS_ANALYST_CONST = "Failed Connections Analyst"
    FC_SUSPICIOUS_DATA_KEY_CONST = "FailedConnectionsSuspiciousData"

    def __init__(self, processTree):
        '''
        Constructor
        '''
        self.logger = logging.getLogger('MalwareAnalyzerShell.analyzers.FailedConnectionsAnalyst')
        self.processTree = processTree

    def analyze_process(self, db_cursor, p_id):
        suspicion_score = 0

#         if self.processTree.isRootProcess(p_id):
#             self.logger.debug("Ignoring root process with ID %s from analysis" % p_id)
#             return 0

        attempts = db_cursor.execute("SELECT id, dst_host, COUNT(*) FROM tcp_operation GROUP BY(dst_host) HAVING p_id=%s" % p_id).fetchall();

        seen_dsts = []
        for attempt in attempts:
          dst_host = attempt[1]

          if dst_host in seen_dsts:
            continue
          else:
            seen_dsts.append(dst_host)

          any_replys = db_cursor.execute("SELECT id FROM tcp_operation WHERE src_host = '%s' AND p_id=%s" % (dst_host, p_id)).fetchone()

          if not any_replys:
            suspicion_score += 1

            all_attempts = db_cursor.execute("SELECT GROUP_CONCAT(id) FROM tcp_operation WHERE dst_host = '%s' AND p_id=%s" % (dst_host, p_id)).fetchone()
            db_cursor.execute("INSERT INTO suspicious_behavior (p_id, analyst, key, value) VALUES (%s, '%s', '%s','%s')"
                % (p_id, self.FAILED_CONNS_ANALYST_CONST,
                self.FC_SUSPICIOUS_DATA_KEY_CONST, all_attempts[0]))

        return suspicion_score

    def get_suspicious_processes(self, db_cursor):
        resp = db_cursor.execute("SELECT p_id FROM suspicious_behavior WHERE key = '%s'" %
                                 (self.FC_SUSPICIOUS_DATA_KEY_CONST)).fetchall()
        processes = {}
        for row in resp:
            p_id = row[0]
            if p_id not in processes:
              processes[p_id] = 0

            processes[p_id] += 1

        return processes

    def get_suspicous_process_data_for_reporting(self, db_cursor, p_id):
      sus_data = []

      resp = db_cursor.execute("SELECT value FROM suspicious_behavior WHERE p_id = %s AND key = '%s'" %
                               (p_id, self.FC_SUSPICIOUS_DATA_KEY_CONST)).fetchall()
      if len(resp):
          table = BeautifulTable(max_width=160)
          table.column_headers = ["Destination Address", "Destination Port", "Time(s)", "Count"]

          for row in resp:
              attempt = db_cursor.execute("SELECT dst_host, dst_port, GROUP_CONCAT(time), COUNT(*) FROM tcp_operation WHERE id IN (%s)" % row[0]).fetchone()
              table.append_row(attempt)

          proc = db_cursor.execute("SELECT pid, desc_address, image FROM process WHERE id = %s" % p_id).fetchone()
          desc = "Process %s %s Image:  %s\n" % (proc[0], proc[1], proc[2])
          sus_data.append((Analyst.DATA_TYPE_TABLE_DESCRIPTION, desc))
          sus_data.append((Analyst.DATA_TYPE_TABLE_DATA, table))

      return sus_data

    def getAnalystName(self):
        return self.FAILED_CONNS_ANALYST_CONST
