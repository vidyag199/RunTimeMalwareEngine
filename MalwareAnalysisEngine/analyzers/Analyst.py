'''
Created on Mar 11, 2018

@author: ashaman
'''

from abc import ABC, abstractmethod

class Analyst(ABC):
    '''
    Analyzes processes for suspicious behavior that may indicate that
    the process is malware
    '''

    DATA_TYPE_TABLE_DESCRIPTION = "Table Description"

    PROCESS_ANALYST_SCORES_TABLE = "Process Analyst Scores Table Data"

    DATA_TYPE_TABLE_DATA = "Table Data"

    DATA_TYPE_INFO = "Info"

    DATA_TYPE_PROCESS_INFO = "Process Info"

    DATA_TYPE_ANALYST_HEADING = "Analyst Heading"

    DATA_TYPE_ANALYST_PROCESS_DATA = "Analyst Process Data"

    def __init__(self, params):
        '''
        Constructor
        '''
        pass

    @abstractmethod
    def analyze_process(self, db_cursor, p_id):
        '''
        Analyzes the specified process for suspicious behavior that may
        indicate that this process is malware.  Returns an integer
        indication the suspicious score of the process with 0 denoting
        not suspicious and any integer greater than 0 signifying suspicion

        Analyst implementations are expected to store information about
        a process's suspicious behavior in the suspicious_behavior table,
        such that a later call to report_process_suspicious_behavior will
        enable this Analyst to provide a textual description of the
        process's suspicious behavior
        '''
        pass

    def get_suspicious_processes(self, db_cursor):
      '''
      Return the list of processes that have been detected as suspicious
      by this Analyst along with the assigned suspicion score
      '''
      pass

    def has_mit_data(self):
      '''
      Returns if this Analyst plugin has data to contribute to the Malware
      Infection Tree (mit)
      '''
      return False

    def get_mit_data(self, db_cursor):
      '''
      Return the Malware Infection Tree (mit) data for this Analyst
      that consists of the p_id of the process that triggered the
      infection and the target process of the infection.
      '''
      return {}

    @abstractmethod
    def get_suspicous_process_data_for_reporting(self, db_cursor, p_id):
      '''
      Returns a list of tuples that describes the suspicious behavior detected
      by this Analyst plugin.  Output plugins will use the data returned
      for reporting.
      '''
      pass

    @abstractmethod
    def getAnalystName(self):
        '''
        Returns the unique name of this analyst
        '''
        pass
