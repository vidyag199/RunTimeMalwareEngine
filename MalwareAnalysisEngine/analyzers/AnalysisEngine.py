#!./bin/python
# encoding: utf-8

'''
Created on Mar 11, 2018

@author: ashaman
'''

import pkgutil
import os
import logging
from analyzers.Analyst import Analyst
from beautifultable.beautifultable import BeautifulTable
from _collections import OrderedDict
from output.console_output_plugin import ConsoleOutputPlugin

class AnalysisEngine(object):

    MULTI_ANALYST_BONUS_KEY = "Multi-Analyst Bonus"
    INHERIT_FROM_CHILD_KEY = "Inherited From Child Process"
    MULTI_ANALYST_SCORE_FACTOR = 20

    '''
    Executable images that come w/ the OS are excluded from analysis, based
    on the assumption that we should have a signature for them and
    therefore can solely use the signature for determination
    of suspicious behavior w/o subjecting them to behavior analysis
    and running the risk of false positives
    '''
    VERIFIED_OS_PROCESSES = ["%system32\compattelrunner.exe%"]

    def __init__(self, processTree, outputPlugin = None):
        '''
        Constructor
        '''
        self.logger = logging.getLogger('MalwareAnalyzerShell.analyzers.AnalysisEngine')
        self.processTree = processTree

        '''
        Assembles a set of Analyst implementations to analyze a process
        for suspicious behavior that may indicate that the process
        is malware
        '''
        self.analysts = {}

        pkgpath = os.path.dirname(__file__)
        for _, name, _ in pkgutil.iter_modules([pkgpath]):
            if(not name == "Analyst"):
                module = __import__('analyzers.%s' % name, fromlist=[name])
                klass = getattr(module, name)
                if(issubclass(klass, Analyst)):
                    analyst = klass(self.processTree)
                    analyst_name = analyst.getAnalystName()
                    if analyst_name in self.analysts:
                        raise Exception("Duplicate analyst name detected:  %s" % analyst_name)

                    self.analysts[analyst_name] = analyst

        if outputPlugin:
          self.outputPlugin = outputPlugin
        else:
          self.outputPlugin = ConsoleOutputPlugin()

    def setOutputPlugin(self, outputPlugin):
      self.outputPlugin = outputPlugin

    def __update_parent_suspicion_score(self, db_cursor, p_id, score):
        #Apply this process's suspicion score up to its parents, except for the root process
        pp_id = self.processTree.getNonRootParentId(p_id)
        if pp_id is None:
            return

        self.logger.debug("Process with id %s will inherit suspicion score %s from %s" % (pp_id, score, p_id))

        p_suspicion_score = db_cursor.execute("SELECT suspicion_score FROM process WHERE id = %s" % pp_id).fetchone()
        p_suspicion_score = int(p_suspicion_score[0])
        self.logger.debug("Score is %s" % p_suspicion_score)
        p_suspicion_score += score
        self.logger.debug("Score is now %s" % p_suspicion_score)
        db_cursor.execute("UPDATE process SET suspicion_score = %s WHERE id = %s" % (p_suspicion_score, pp_id))

        db_cursor.execute("INSERT INTO suspicious_behavior (p_id, analyst, key, value) VALUES (%s, '%s', '%s', '%s|%s')" %
                              (pp_id, "AnalysisEngine", self.INHERIT_FROM_CHILD_KEY, p_id, score))


    def analyze_processes(self, db_cursor):
        process_ids = self.processTree.getAllProcessesPostOrder()
        db_cursor.execute("DELETE FROM suspicious_behavior")
        db_cursor.execute("DELETE FROM sqlite_sequence WHERE name='suspicious_behavior'")
        db_cursor.execute("UPDATE process SET suspicion_score = 0")

        for p_id in process_ids:
            #really inefficient, but this late in the game, go w/ the simplest
            excluded = False
            for verified_image in self.VERIFIED_OS_PROCESSES:
              found = db_cursor.execute("SELECT 1 FROM process WHERE id = %s AND image LIKE '%s'" % (p_id, verified_image)).fetchone()
              if found is not None:
                excluded = True
                break

            if excluded:
              self.logger.debug("Process with p_id %s will not be analyzed as it is a verified OS executable" % p_id)
              continue

            suspicion_score = db_cursor.execute("SELECT suspicion_score FROM process WHERE id = %s" % p_id).fetchone()
            suspicion_score = int(suspicion_score[0])
            numAnalystDetections = 0

            for name, analyst in self.analysts.items():
                analyst_score = analyst.analyze_process(db_cursor, p_id)
                suspicion_score += analyst_score

                if(analyst_score > 0):
                    db_cursor.execute("INSERT INTO suspicious_behavior (p_id, analyst, key, value) VALUES (%s, '%s', 'Suspicion Score', %s)" %
                                      (p_id, name, analyst_score))
                    numAnalystDetections += 1

            if numAnalystDetections > 1:
                #Increase the suspicion score of this process due to multiple analysts detecting suspicious behavior
                multi_analyst_bonus = numAnalystDetections * self.MULTI_ANALYST_SCORE_FACTOR
                db_cursor.execute("INSERT INTO suspicious_behavior (p_id, analyst, key, value) VALUES (%s, '%s', '%s', %s)" %
                                  (p_id, "AnalysisEngine", self.MULTI_ANALYST_BONUS_KEY, multi_analyst_bonus))
                suspicion_score += multi_analyst_bonus

            db_cursor.execute("UPDATE process SET suspicion_score = %s WHERE id = %s" % (suspicion_score, p_id))

            if suspicion_score > 0:
                self.__update_parent_suspicion_score(db_cursor, p_id, suspicion_score)

    def getSuspicionRating(self, score):
      rating = "Not Suspicious"
      if score is None:
        return rating

      if score >= 1:
        rating = "Suspicious"
      if score >= 5:
        rating = "Moderately Suspicious"
      if score >= 10:
        rating = "Highly Suspicious"

      return rating

    def __get_analyst_scores(self, db_cursor, p_id):
        analyst_scores = OrderedDict()
        total = db_cursor.execute("SELECT suspicion_score FROM process WHERE id = %s" % p_id).fetchone()[0]

        for row in db_cursor.execute("SELECT analyst, value FROM suspicious_behavior WHERE p_id = %s AND key = 'Suspicion Score'" % p_id):
            analyst_scores[row[0]] = row[1]

        multi = db_cursor.execute("SELECT value FROM suspicious_behavior WHERE p_id = %s AND key = '%s'" % (p_id, self.MULTI_ANALYST_BONUS_KEY)).fetchone()
        if multi:
            analyst_scores[self.MULTI_ANALYST_BONUS_KEY] = multi[0]

        resp = db_cursor.execute("SELECT value FROM suspicious_behavior WHERE p_id = %s AND key = '%s'" % (p_id, self.INHERIT_FROM_CHILD_KEY)).fetchall()
        for inherited in resp:
            inherited = inherited[0].split("|")
            child = db_cursor.execute("SELECT pid, desc_address, image FROM process WHERE id = %s" % inherited[0]).fetchone()
            inheritedAnalyst = "%s %s %s %s" % (self.INHERIT_FROM_CHILD_KEY, child[0], child[1], child[2])
            analyst_scores[inheritedAnalyst] = inherited[1]

        analyst_scores["Total"] = total
        return analyst_scores

    def __print_analyst_report(self, db_cursor, p_id, analyst_name, proc_report_data):
        if analyst_name == self.MULTI_ANALYST_BONUS_KEY:
            proc_report_data.append((Analyst.DATA_TYPE_INFO, "This process received a bonus score of (# of Analysts) * %s" % self.MULTI_ANALYST_SCORE_FACTOR,
                  "to increase it suspicion score\n",
                  "due to being flagged as suspicious by multiple analysts\n"))
            return
        if analyst_name.startswith(self.INHERIT_FROM_CHILD_KEY):
            return

        if not analyst_name in self.analysts:
            raise Exception("Invalid analyst name %s specified" % analyst_name)

        analyst = self.analysts[analyst_name]
        report_data = analyst.get_suspicous_process_data_for_reporting(db_cursor, p_id)
        proc_report_data.append((Analyst.DATA_TYPE_ANALYST_PROCESS_DATA, report_data))

    def print_analyst_report(self, cursor, includeRootProcesses):
      numAnalysDetected = 0
      for name, analyst in self.analysts.items():
        procs = analyst.get_suspicious_processes(cursor)
        if procs:
          table = BeautifulTable(max_width=160)

          table.column_headers = ["PID", "Descriptor Address", "Image", "Suspicion Score", "Suspicion Rating"]
          for p_id,score in procs.items():
              if not includeRootProcesses and self.processTree.isRootProcess(p_id):
                    continue

              rating = self.getSuspicionRating(score)
              row = cursor.execute("SELECT pid, desc_address, COALESCE(image, ''), %d, '%s' FROM process WHERE id = %s" % (score, rating, p_id)).fetchone()
              table.append_row(row)

          if len(table):
            print("Suspicious Processes Detected By %s\n" % name)
            print(table)
            print("Number of results:  %s\n" % len(table))
            print("\n")
            numAnalysDetected += 1
          else:
            print("*** No suspicious processes detected by %s ***\n" % name)
        else:
          print("*** No suspicious processes detected by %s ***\n" % name)


      print("%d/%d Analyst plugins detected suspicious processes in this database\n"
            % (numAnalysDetected, len(self.analysts)))

    def get_mit_data(self, cursor, includedRootProcesses):
      mitData = {}
      for _,analyst in self.analysts.items():
        if analyst.has_mit_data():
          aMitData = analyst.get_mit_data(cursor)
          mitData = {**mitData, **aMitData}

      #merge sources
      if not includedRootProcesses:
        mitData = { key: mitData[key] for key in mitData if not self.processTree.isRootProcess(key) }

      #merge targets
      finalMitData = {}
      for source, targetlist in mitData.items():
        finalMitData[source] = {}
        for targetInfo in targetlist:
          target = targetInfo[0]
          mType = targetInfo[1]

          if target in finalMitData[source]:
            finalMitData[source][target].append(mType)
          else:
            finalMitData[source][target] = [mType]

      return finalMitData


    def print_report(self, cursor, process_ids, includeRootProcesses):
        if process_ids:
            for p_id in process_ids:
                if not includeRootProcesses and self.processTree.isRootProcess(p_id):
                    continue

                proc_report_data = []

                analyst_scores = self.__get_analyst_scores(cursor, p_id)

                row = cursor.execute("SELECT id, image, desc_address, suspicion_score, pid FROM process WHERE id = %s" % p_id).fetchone()
                proc_report_data.append((Analyst.DATA_TYPE_PROCESS_INFO, "\nProcess %s (%s) Image:  %s" % (row[4], row[2], row[1])))
                proc_report_data.append((Analyst.DATA_TYPE_PROCESS_INFO, "Suspicion Rating:  %s\n" % (self.getSuspicionRating(row[3]))))

                table = BeautifulTable(max_width=160)

                table.column_headers = ["Analyst", "Suspicion Score"]
                for name,score in analyst_scores.items():
                    table.append_row([name, score])

                proc_report_data.append((Analyst.PROCESS_ANALYST_SCORES_TABLE, table))

                for name,score in analyst_scores.items():
                    if not name.endswith("Analyst"):
                        continue

                    proc_report_data.append((Analyst.DATA_TYPE_ANALYST_HEADING, name))
                    self.__print_analyst_report(cursor, row[0], name, proc_report_data)

                self.outputPlugin.print_process_report(row[4], row[2], row[1], proc_report_data)
        else:
            summary = []
            table = BeautifulTable(max_width=160)
            table.column_headers = ["PID", "Descriptor Address", "Image", "Suspicion Score", "Suspicion Rating"]

            resp = cursor.execute("SELECT id FROM process").fetchall()
            for row in resp:
                p_id = row[0]

                if not includeRootProcesses and self.processTree.isRootProcess(p_id):
                    continue

                row = cursor.execute("SELECT pid, desc_address, COALESCE(image, '') FROM process WHERE id = %s" % p_id).fetchone()
                suspicion_score = self.__get_analyst_scores(cursor, p_id)
                if(suspicion_score["Total"] > 0):
                    score = suspicion_score["Total"]
                    rating = self.getSuspicionRating(score)
                    table.append_row([row[0], row[1], row[2], score, rating])

            if len(table):
                table.sort(3,True)
                summary.append((Analyst.DATA_TYPE_TABLE_DATA, table))
                summary.append((Analyst.DATA_TYPE_INFO, "Run the command 'report <pid>' to see the details for a particular process\n"))
            else:
                summary.append((Analyst.DATA_TYPE_INFO, "No suspicious processes were detected"))

            self.outputPlugin.print_process_summary(summary)
