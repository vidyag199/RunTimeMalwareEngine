'''
Created on Mar 21, 2018

@author: ashaman
'''

import logging
from analyzers.Analyst import Analyst
from beautifultable import BeautifulTable

class TerminateProcessAnalyst(Analyst):
    '''
    Checks if the specified process attempted to terminate an unrelated
    process
    '''

    TERMINATTE_PROCESS_ANALYST_CONST = "Process Termination Analyst"
    TERMINATE_SUSPICIOUS_DATA_KEY_CONST = "TerminateProcSuspiciousData"

    def __init__(self, processTree):
        '''
        Constructor
        '''
        self.logger = logging.getLogger('MalwareAnalyzerShell.analyzers.TerminateModuleAnalyst')
        self.processTree = processTree

    def analyze_process(self, db_cursor, p_id):
        suspicion_score = 0

#         if self.processTree.isRootProcess(p_id):
#             self.logger.debug("Ignoring root process with ID %s from analysis" % p_id)
#             return 0

        terminations = db_cursor.execute("SELECT GROUP_CONCAT(operation.id), target_p_id FROM operation "
                                         "JOIN process ON target_p_id = process.id WHERE data='PROCESS_TERMINATE' AND "
                                         "p_id=%s AND time < process.terminated_time GROUP BY target_p_id, data" % p_id).fetchall();

        for termination in terminations:
            target_p_id = termination[1]
            o_ids = termination[0]

            if target_p_id == p_id:
                continue

            if(not self.processTree.isRelated(p_id, target_p_id)):
                suspicion_score += 1

                db_cursor.execute("INSERT INTO suspicious_behavior (p_id, analyst, key, value) VALUES (%s, '%s', '%s','%s|%s')"
                        % (p_id, self.TERMINATTE_PROCESS_ANALYST_CONST,
                        self.TERMINATE_SUSPICIOUS_DATA_KEY_CONST, target_p_id, o_ids))

        return suspicion_score

    def get_suspicious_processes(self, db_cursor):
        resp = db_cursor.execute("SELECT p_id FROM suspicious_behavior WHERE key = '%s'" %
                                 (self.TERMINATE_SUSPICIOUS_DATA_KEY_CONST)).fetchall()
        processes = {}
        for row in resp:
            p_id = row[0]
            if p_id not in processes:
              processes[p_id] = 0

            processes[p_id] += 1

        return processes

    def get_suspicous_process_data_for_reporting(self, db_cursor, p_id):
        sus_data = []
        resp = db_cursor.execute("SELECT value FROM suspicious_behavior WHERE p_id = %s AND key = '%s'" %
                                 (p_id, self.TERMINATE_SUSPICIOUS_DATA_KEY_CONST)).fetchall()
        if len(resp):
            table = BeautifulTable(max_width=160)
            table.column_headers = ["PID", "Descriptor Address", "Image", "Termination Time", "Terminate Handle Request Time(s)"]

            for row in resp:
                termInfo = row[0].split("|")
                terminate_proc = db_cursor.execute("SELECT pid, desc_address, COALESCE(image, ''), terminated_time FROM process WHERE id = %s" % termInfo[0]).fetchone()
                terminate_proc = list(terminate_proc)
                handle_req = db_cursor.execute("SELECT GROUP_CONCAT(time) FROM operation WHERE id IN (%s)" % termInfo[1]).fetchone()
                terminate_proc.append(handle_req[0])
                table.append_row(terminate_proc)


            proc = db_cursor.execute("SELECT pid, desc_address, image FROM process WHERE id = %s" % p_id).fetchone()
            sus_data.append((Analyst.DATA_TYPE_TABLE_DESCRIPTION, "Process %s %s Image:  %s\n" % (proc[0], proc[1], proc[2])))
            sus_data.append((Analyst.DATA_TYPE_TABLE_DATA, table))

        return sus_data

    def getAnalystName(self):
        return self.TERMINATTE_PROCESS_ANALYST_CONST
