'''
Created on Mar 21, 2018

@author: ashaman
'''

import logging
from analyzers.Analyst import Analyst
from beautifultable import BeautifulTable

class RegistryAnalyst(Analyst):
    '''
    Checks if the specified process attempted write suspciously
    to the registry, i.e. for now just the run and runonce keys
    '''

    REGISTRY_ANALYST_CONST = "Registry Analyst"
    REGISTRY_SUSPICIOUS_DATA_KEY_CONST = "RegistrySuspiciousData"

    REGISTRY_KEYS_WATCH = ['\\REGISTRY\\MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run',
                           '\\REGISTRY\\MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce',
                           '\\REGISTRY\\MACHINE\\User\\Microsoft\\Windows\\CurrentVersion\\Run',
                           '\\REGISTRY\\MACHINE\\User\\Microsoft\\Windows\\CurrentVersion\\RunOnce',
                           '\\REGISTRY\\MACHINE\\SOFTWARE\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run',
                           '\\REGISTRY\\MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce']

    # These keys, if accessed, are normally very indicative of malware, as normal programs don't really modify them
    REGISTRY_KEYS_WATCH_REALLY_SUSPICIOUS = ['\REGISTRY\\MACHINE\\SOFTWARE\\Classes\\exefile\\shell\\open\\command',
                           '\REGISTRY\\MACHINE\\SOFTWARE\\Classes\\comfile\\shell\\open\\command',
                           '\REGISTRY\\MACHINE\\SOFTWARE\\Classes\\batfile\\shell\\open\\command']

    REGISTRY_KEYS_WATCH_REALLY_SUSPICIOUS_WEIGHT = 5

    def __init__(self, processTree):
        '''
        Constructor
        '''
        self.logger = logging.getLogger('MalwareAnalyzerShell.analyzers.RegistryAnalyst')
        self.processTree = processTree

    def analyze_process(self, db_cursor, p_id):
        suspicion_score = 0

#         if self.processTree.isRootProcess(p_id):
#             self.logger.debug("Ignoring root process with ID %s from analysis" % p_id)
#             return 0

        reg_accesses = db_cursor.execute("SELECT operation.id FROM operation JOIN \
            resource ON r_id = resource.id WHERE type='R' AND p_id=%s AND \
            name IN ('%s')" % (p_id, "','".join(self.REGISTRY_KEYS_WATCH))).fetchall()

        for reg_access in reg_accesses:
            suspicion_score += 1

            db_cursor.execute("INSERT INTO suspicious_behavior (p_id, analyst, key, value) VALUES (%s, '%s', '%s', '%s|1')"
                % (p_id, self.REGISTRY_ANALYST_CONST,
                self.REGISTRY_SUSPICIOUS_DATA_KEY_CONST, reg_access[0]))

        reg_accesses = db_cursor.execute("SELECT operation.id FROM operation JOIN \
            resource ON r_id = resource.id WHERE type='R' AND p_id=%s AND \
            name IN ('%s')" % (p_id, "','".join(self.REGISTRY_KEYS_WATCH_REALLY_SUSPICIOUS))).fetchall()

        for reg_access in reg_accesses:
            suspicion_score += 5

            db_cursor.execute("INSERT INTO suspicious_behavior (p_id, analyst, key, value) VALUES (%s, '%s', '%s', '%s|%s')"
                % (p_id, self.REGISTRY_ANALYST_CONST,
                self.REGISTRY_SUSPICIOUS_DATA_KEY_CONST, reg_access[0],
                self.REGISTRY_KEYS_WATCH_REALLY_SUSPICIOUS_WEIGHT))

        return suspicion_score

    def get_suspicious_processes(self, db_cursor):
        resp = db_cursor.execute("SELECT p_id, value FROM suspicious_behavior WHERE key = '%s'" %
                                 (self.REGISTRY_SUSPICIOUS_DATA_KEY_CONST)).fetchall()
        processes = {}
        for row in resp:
            p_id = row[0]
            value = row[1].split("|")
            if p_id not in processes:
              processes[p_id] = 0

            processes[p_id] += int(value[1])

        return processes

    def get_suspicous_process_data_for_reporting(self, db_cursor, p_id):
      sus_data = []

      resp = db_cursor.execute("SELECT value FROM suspicious_behavior WHERE p_id = %s AND key = '%s'" %
                               (p_id, self.REGISTRY_SUSPICIOUS_DATA_KEY_CONST)).fetchall()
      if len(resp):
          table = BeautifulTable(max_width=160)
          table.column_headers = ["Time", "Key Name", "Operation", "Aux Data", "Weight"]

          for row in resp:
              value = row[0].split("|")
              op_id = value[0]
              op_info = db_cursor.execute("SELECT time, name, op, COALESCE(data, ''), %s FROM operation \
                  JOIN resource ON r_id = resource.id WHERE operation.id = %s" % (value[1], op_id)).fetchone()
              table.append_row(op_info)


          proc = db_cursor.execute("SELECT pid, desc_address, image FROM process WHERE id = %s" % p_id).fetchone()
          sus_data.append((Analyst.DATA_TYPE_TABLE_DESCRIPTION, "Process %s %s Image:  %s\n\n" % (proc[0], proc[1], proc[2])))
          sus_data.append((Analyst.DATA_TYPE_TABLE_DESCRIPTION, "Process accessed the following registry keys which may be suspicious:"))
          sus_data.append((Analyst.DATA_TYPE_TABLE_DATA,table))

      return sus_data

    def getAnalystName(self):
        return self.REGISTRY_ANALYST_CONST