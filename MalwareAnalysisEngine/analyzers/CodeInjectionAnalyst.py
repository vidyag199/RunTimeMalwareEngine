'''
Created on Mar 11, 2018

@author: ashaman
'''

import logging
from analyzers.Analyst import Analyst
from beautifultable import BeautifulTable

class CodeInjectionAnalyst(Analyst):
    '''
    Checks if the specified process attempted to inject code in
    another process
    '''

    CODE_INJECTION_ANALYST_CONST = "CodeInjectionAnalyst Analyst"
    CODE_INJECTION_SUSPICIOUS_DATA_KEY_CONST = "CodeInjectionSuspiciousData"

    def __init__(self, processTree):
        '''
        Constructor
        '''
        self.logger = logging.getLogger('MalwareAnalyzerShell.analyzers.CodeInjectionAnalyst')
        self.processTree = processTree

    def analyze_process(self, db_cursor, p_id):
        suspicion_score = 0

#         '''
#         Exclude System processes from code injection suspicion
#         Some root processes like Windows Defender inspect all
#         executables run on the system and would lead to false positives
#         This may be risky since we cannot be 100% sure that the process
#         is actually a root process or if it is a root process, it hasn't
#         been compromised.  If this analysis was actually occurring on the system,
#         we would be able to determine the ID of the process and use other methods
#         to ensure that it is safe to ignore
#         '''
#         if self.processTree.isRootProcess(p_id):
#             self.logger.debug("Ignoring root process with ID %s from analysis" % p_id)
#             return 0

        resp = db_cursor.execute("SELECT time, target_p_id, p1.pid, p1.desc_address, \
            COALESCE(p1.image, ''), p2.pid, p2.desc_address, COALESCE(p2.image, ''), operation.id FROM operation \
            JOIN process p1 ON target_p_id = p1.id JOIN process p2 ON p_id = p2.id \
            WHERE p2.id = %s AND (data = 'PROCESS_VM_WRITE' or data = 'PROCESS_ALL_ACCESS')" % p_id).fetchall()

        for row in resp:
            time = row[0]
            target_p_id = row[1]
            #if process injected into itself, ignore the operation
            if target_p_id == p_id:
                continue


            self.logger.debug("Process %s (%s %s) requested the ability to inject into process with id %s (%s %s) at %s"
                              % (row[5], row[6], row[7], row[2], row[3], row[4], time))


            if(not self.processTree.isRelated(p_id, target_p_id)):
                '''
                If the processes are not related, then we suspect this is code injection
                Should we check that the target process has loaded a library after the timestamp
                of this operation??
                '''
                self.logger.debug("Processes are not related!!!")

                #There mere request for a handle to a foreign process is suspicious
#                 suspicion_score += 1

                loadsByTarget = db_cursor.execute("SELECT operation.id, time, name FROM operation JOIN resource \
                    ON r_id = resource.id WHERE target_p_id = %s AND time > %s AND op = 'IMAGE-LOAD'"
                    % (target_p_id, time)).fetchall()

                self.logger.debug("The target process loaded the following DLLS after possible inject: %s" % (loadsByTarget))
                if len(loadsByTarget):
                    #You are suspicious
                    op_ids = [str(tginfo[0]) for tginfo in loadsByTarget]
                    db_cursor.execute("INSERT INTO suspicious_behavior (p_id, analyst, key, value) VALUES (%s, '%s', '%s','%s|%s')"
                                      % (p_id, self.CODE_INJECTION_ANALYST_CONST, self.CODE_INJECTION_SUSPICIOUS_DATA_KEY_CONST, row[8], ",".join(op_ids)))
                    # DLL injection found!!!
                    suspicion_score += 1


        return suspicion_score


    def get_suspicious_processes(self, db_cursor):
        resp = db_cursor.execute("SELECT p_id FROM suspicious_behavior WHERE key = '%s'" %
                                 (self.CODE_INJECTION_SUSPICIOUS_DATA_KEY_CONST)).fetchall()
        processes = {}
        for row in resp:
            p_id = row[0]
            if p_id not in processes:
              processes[p_id] = 0

            processes[p_id] += 1

        return processes

    def get_suspicous_process_data_for_reporting(self, db_cursor, p_id):
      sus_data = []

      resp = db_cursor.execute("SELECT value FROM suspicious_behavior WHERE p_id = %s AND key = '%s'" %
                               (p_id, self.CODE_INJECTION_SUSPICIOUS_DATA_KEY_CONST)).fetchall()
      if len(resp):
          for row in resp:
              table = BeautifulTable(max_width=160)
              table.column_headers = ["Time", "Request Type", "Injectee PID", "Injectee Descriptor Address", "Injectee Image", "Operation", "DLL"]

              info = row[0].split("|")
              op_id = info[0]
              image_load_ids = info[1]

              op_info = db_cursor.execute("SELECT time, p1.pid, p1.desc_address, \
                  COALESCE(p1.image, ''), data FROM operation JOIN process p1 ON \
                  target_p_id = p1.id WHERE operation.id = %s" % op_id).fetchone()

#               desc = "The process requested %s at time %s on process %s (%s) %s which may have " \
#                     "resulted in the following DLL loads ..." \
#                     % (op_info[4], op_info[0], op_info[1], op_info[2], op_info[3])
#
#               sus_data.append((Analyst.DATA_TYPE_TABLE_DESCRIPTION, desc))

              load_resp = db_cursor.execute("SELECT time, '%s', p_id, desc_address, COALESCE(image, ''), op, name FROM operation JOIN resource \
                  ON r_id = resource.id JOIN process ON process.id = p_id WHERE operation.id IN (%s)" % (op_info[4], image_load_ids)).fetchall()
              for load_info in load_resp:
                  table.append_row(load_info)

              sus_data.append((Analyst.DATA_TYPE_TABLE_DATA, table))

      return sus_data

    def has_mit_data(self):
      return True

    def get_mit_data(self, db_cursor):
      resp = db_cursor.execute("SELECT p_id, value FROM suspicious_behavior WHERE key = '%s'" %
                               (self.CODE_INJECTION_SUSPICIOUS_DATA_KEY_CONST)).fetchall()
      mit_data = {}
      found_pids = {}
      for row in resp:
        p_id = row[0]
        info = row[1].split("|")
        op_id = info[0]
        target_pid = db_cursor.execute("SELECT target_p_id FROM operation WHERE operation.id = %s" % op_id).fetchone()

        if target_pid is None:
          continue

        target_pid = target_pid[0]

        if p_id not in mit_data:
          mit_data[p_id] = []
          found_pids[p_id] = []

        if not target_pid in found_pids[p_id]:
          found_pids[p_id].append(target_pid)
          mit_data[p_id].append((target_pid, "CI"))

      return mit_data

    def getAnalystName(self):
        return self.CODE_INJECTION_ANALYST_CONST
