#!/usr/bin/env python
# encoding: utf-8

import sys
import os
import importlib

import build_database
import malware_analyzer
import traceback

failed_files = {}

def parseDebugViewLog(inputLog, outputDB):
    global failed_files

    importlib.reload(build_database)
    print("Parsing %s and building malware database %s\n" % (inputLog, outputDB))
    if not os.path.exists(outputDB):
      in_progress = "%s.part" % outputDB

      if os.path.exists(in_progress):
        os.remove(in_progress)

      try:
        build_database.buildMalwareDatabase([inputLog], in_progress)
      except:
        failed_files[inputLog] = sys.exc_info()[0]
        print(traceback.format_exc())
        return False

      os.rename(in_progress, outputDB)
    else:
      print("  Already exists, skipping!")


    return True


def analyzeMalwareDatabase(filename):
  try:
    malwareShell = malware_analyzer.MalwareAnalyzerShell()
    malwareShell.do_load_db(filename)
    malwareShell.do_analyze(True)
    malwareShell.close()
    importlib.reload(malware_analyzer)
  except:
    print("Failed to analyze %s\n" % filename)
    print(traceback.format_exc())

if len(sys.argv) < 5:
  print("build_all_databases.py -i <source directory> -o <output-directory>")

inputDirectory = sys.argv[2]
outputDirectory = sys.argv[4]

# for filename in os.listdir(inputDirectory):
#   if not filename.endswith(".exe.log"):
#     continue
#
#   inputFileName = "%s/%s" % (inputDirectory, filename)
#   outputFileName = "%s/%s.sql" % (outputDirectory, filename)
#   parseDebugViewLog(inputFileName, outputFileName)
#
#
# if len(failed_files):
#   print("\n\n\n")
#   for name, exception in failed_files.items():
#     print("Failed to parse %s\n" % (name), exception)


for filename in os.listdir(outputDirectory):
  if not filename.endswith(".exe.log.sql"):
    continue

  outputFileName = "%s/%s" % (outputDirectory, filename)
  analyzeMalwareDatabase(outputFileName)